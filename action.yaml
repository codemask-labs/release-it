name: Release it
description: Release it Composite Github Action

inputs:
  release-branch:
    description: Which branch you would like to release
    default: main
  dry-run:
    description: "Dry run"
    required: false
    default: "false"
  no-npm:
    description: "Skip releasing it to npm"
    required: false
    default: "false"
  no-git:
    description: "Skip releasing it to Github"
    required: false
    default: "false"
  manual-version:
    description: "Sets explicit version for the release. For example: 1.0.0"
    required: false
  git-user:
    description: "Github username"
    required: true
  git-email:
    description: "Github email"
    required: true
  git-token:
    description: "Github token to push release"
    required: true

outputs:
  version:
    description: "Version of successful release"
    value: ${{ steps.release-it.outputs.version }}

runs:
  using: composite
  steps:
    - name: Setup Node
      uses: actions/setup-node@v4.3.0
      with:
        node-version: lts/*

    - name: Init Git user
      shell: bash
      run: |
        git config --global user.email "${{ inputs.git-email }}"
        git config --global user.name "${{ inputs.git-user }}"

    - name: Install Dependencies
      shell: bash
      run: npm install -g @release-it/conventional-changelog release-it --ignore-scripts

    - name: Release
      id: release-it
      env:
        GITHUB_TOKEN: ${{ inputs.git-token }}
      shell: bash
      run: |
        flags=("--ci")

        # Handle dry-run flag
        if [ "${{ inputs.dry-run }}" == "true" ]; then
          flags+=("--dry-run")
        fi

        # Handle no-npm flag
        if [ "${{ inputs.no-npm }}" == "true" ]; then
          flags+=("--no-npm")
        fi

        # Handle no-git flag
        if [ "${{ inputs.no-git }}" == "true" ]; then
          flags+=("--no-git")
        fi

        # Handle pre-release based on branch (if not main)
        if [ "${{ inputs.release-branch }}" != "main" ]; then
          flags+=("--npm.tag=${{ inputs.release-branch }}")
          flags+=("--preRelease=${{ inputs.release-branch }}")
        fi

        # Handle manual version input
        if [ ! -z "${{ inputs.manual-version }}" ]; then
          flags+=("${{ inputs.manual-version }}")
        fi

        # Print the full command to the CI log
        echo "Running: release-it ${flags[*]}"

        # Execute release-it with constructed flags
        release-it "${flags[@]}"
